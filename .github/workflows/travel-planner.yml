name: travel-planner

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

env:
  TESTDB_NAME: travel_planner_test
  DB_USERNAME: postgres
  DB_PASSWORD: postgres
  POSTGRES_HOST: postgres

jobs:
  test-server:
    runs-on: ubuntu-latest
    container: node:lts-alpine
    services:
      postgres:
        image: postgres
        env:
          TESTDB_NAME: ${{ env.TESTDB_NAME }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - working-directory: backend
        run: |
          yarn install
          yarn knex migrate:latest --env test
          yarn test

  build-server:
    needs: test-server
    runs-on: ubuntu-latest
    container: docker:20.10.21-alpine3.16
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Build and Push
        working-directory: backend
        run: |
          docker build -t pinkman667/travel_planner:latest .
          docker push pinkman667/travel_planner:latest

  build-react:
    runs-on: ubuntu-latest
    container: node:lts-alpine
    steps:
      - uses: actions/checkout@v3
      - name: Build frondend project
        working-directory: frontend
        env:
          REACT_APP_API_SERVER: https://api-travel-planner.pinkman.world
          REACT_APP_FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_CLIENT_ID }}
          REACT_APP_GOOGLE_MAP_API_KEY: ${{ secrets.REACT_APP_GOOGLE_MAP_API_KEY }}
        run: |
          yarn install
          yarn test
          yarn run build
      - name: Archive react built files
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: frontend/build

  deploy-server:
    needs: build-server
    runs-on: ubuntu-latest
    steps:
      - name: Executing remote ssh
        uses: appleboy/ssh-action@master
        env:
          FACEBOOK_CLIENT_ID: ${{ secrets.FACEBOOK_CLIENT_ID }}
          FACEBOOK_CLIENT_SECRET: ${{ secrets.FACEBOOK_CLIENT_SECRET }}
          jwt_secret: ${{ secrets.JWT_SECRET }}
          REACT_PUBLIC_HOSTNAME: https://travel-planner.pinkman.world
        with:
          host: api-travel-planner.pinkman.world
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          username: ubuntu
          envs: FACEBOOK_CLIENT_ID,FACEBOOK_CLIENT_SECRET,jwt_secret,REACT_PUBLIC_HOSTNAME
          script: |
            cd api.travel_planner
            docker compose pull
            docker image prune -f 
            docker compose up -d
          
  deploy-react:
    needs: build-react
    runs-on: ubuntu-latest
    container: python:3.6
    steps:
      - uses: actions/checkout@v3
      - name: Restore frontend files
        uses: actions/download-artifact@v3
        with:
          name: build
          path: frontend/build
      - name: Deploy to s3 and cloudfront
        working-directory: frontend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          pip install awscli
          aws s3 sync ./build s3://travel-planner.pinkman.world --delete
          aws cloudfront create-invalidation --distribution-id ELE8ACJUKX9Q1 --paths "/*"